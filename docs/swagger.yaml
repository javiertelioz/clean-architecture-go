definitions:
  dto.CreateUserDTO:
    properties:
      email:
        type: string
      lastName:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      surname:
        type: string
    required:
    - email
    - lastName
    - name
    - password
    - phone
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        type: string
      lastName:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      surname:
        type: string
    type: object
  response.Response:
    description: response information.
    properties:
      code:
        type: integer
      message:
        example: Success
        type: string
    type: object
  serializers.ApplicationSerializer:
    description: Application information
    properties:
      date:
        example: "2023-09-17 22:32:15.572201"
        type: string
      message:
        example: Clean Architecture GO
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  serializers.HelloSerializer:
    description: Hello information
    properties:
      message:
        example: Joe
        type: string
    type: object
  serializers.TokenSerializer:
    description: Token information
    properties:
      token:
        example: ""
        type: string
    type: object
  serializers.UserSerializer:
    description: User information
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      name:
        example: John
        type: string
      password:
        example: password123
        type: string
      phone:
        example: "+1234567890"
        type: string
      surname:
        example: Jr
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Get token
      parameters:
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      - description: User data to be created
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            $ref: '#/definitions/serializers.TokenSerializer'
        "401":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get access token (login)
      tags:
      - Auth
  /api/v1/hello/{name}:
    get:
      consumes:
      - application/json
      description: Say Hello
      parameters:
      - default: Joe
        description: Name
        in: path
        name: name
        required: true
        type: string
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.HelloSerializer'
      summary: Say Hello
      tags:
      - Hello
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: List of Users
          schema:
            items:
              $ref: '#/definitions/serializers.UserSerializer'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Register a new user with provided information
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created User
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new user
      tags:
      - User
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a user's information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted Successfully
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a user by ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve user information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User Data
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Modify an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data to Update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated User
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a user by ID
      tags:
      - User
  /application:
    get:
      consumes:
      - application/json
      description: Retrieve application information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ApplicationSerializer'
      security:
      - bearerAuth: []
      summary: Retrieve application information
      tags:
      - Application
swagger: "2.0"
