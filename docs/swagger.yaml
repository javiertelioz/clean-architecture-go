basePath: /
definitions:
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  response.Error:
    properties:
      details: {}
      errorCode:
        type: string
      message:
        type: string
      request_id:
        type: string
      timestamp:
        type: string
    type: object
  response.Response:
    description: response information.
    properties:
      code:
        type: integer
      message:
        example: Success
        type: string
    type: object
  serializers.ApplicationSerializer:
    description: Application information
    properties:
      date:
        example: "2023-09-17 22:32:15.572201"
        type: string
      message:
        example: Clean Architecture GO
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  serializers.HelloSerializer:
    description: Hello information
    properties:
      message:
        example: Joe
        type: string
    type: object
  serializers.TokenSerializer:
    description: Token information
    properties:
      token:
        example: ""
        type: string
    type: object
  serializers.UserSerializer:
    description: User information
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      name:
        example: John
        type: string
      password:
        example: password123
        type: string
      phone:
        example: "+1234567890"
        type: string
      surname:
        example: Jr
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@docs.io
    name: API Support
    url: http://www.swagger.io/support
  description: 'This is a sample. You can find out more about Swagger at [http://swagger.io](http://swagger.io)
    or on [irc.freenode.net, #swagger](http://swagger.io/irc/)'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Clean Architecture Go
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Retrieve application information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ApplicationSerializer'
      security:
      - bearerAuth: []
      summary: Retrieve application information
      tags:
      - Application
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Get token
      parameters:
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      - description: User data to be created
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            $ref: '#/definitions/serializers.TokenSerializer'
        "401":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get access token (login)
      tags:
      - Auth
  /api/v1/hello/{name}:
    get:
      consumes:
      - application/json
      description: Say Hello
      parameters:
      - default: Joe
        description: Name
        in: path
        name: name
        required: true
        type: string
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.HelloSerializer'
      summary: Say Hello
      tags:
      - Hello
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all registered users
      parameters:
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            items:
              $ref: '#/definitions/serializers.UserSerializer'
            type: array
        "401":
          description: desc
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - bearerAuth: []
      summary: List all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Register a new user based on provided data
      parameters:
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      - description: User data to be created
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/serializers.UserSerializer'
      produces:
      - application/json
      responses:
        "201":
          description: desc
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new user
      tags:
      - User
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a user based on provided ID
      parameters:
      - default: 1
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - default: 1
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/serializers.UserSerializer'
              type: object
        "404":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user account by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Modify an existing user based on provided data
      parameters:
      - default: 1
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data to be update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/serializers.UserSerializer'
      - default: en-US
        description: Language
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: desc
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a user
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  bearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
